generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  role          Role       @default(USER)
  name          String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  questions     Question[]
  reactions     Reaction[]
  stacks        Stack[]
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Comment {
  id         String     @id @default(cuid())
  text       String
  authorId   String     @map("author_id")
  bookmarkId String?    @map("bookmark_id")
  questionId String?    @map("question_id")
  stackId    String?    @map("stack_id")
  snippetId  String?    @map("snippet_id")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  bookmark   Bookmark?  @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  question   Question?  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  snippet    Snippet?   @relation(fields: [snippetId], references: [id], onDelete: Cascade)
  stack      Stack?     @relation(fields: [stackId], references: [id], onDelete: Cascade)
  reactions  Reaction[]

  @@index([bookmarkId])
  @@index([questionId])
  @@index([stackId])
  @@map("comments")
}

model Question {
  id          String     @id @default(cuid())
  title       String     @db.VarChar(256)
  description String?    @db.VarChar(1024)
  authorId    String     @map("author_id")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  reactions   Reaction[]

  @@map("questions")
}

model Snippet {
  id          String     @id @default(cuid())
  slug        String     @unique
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  description String?    @db.VarChar(256)
  title       String     @db.VarChar(256)
  logo        String
  comments    Comment[]
  reactions   Reaction[]

  @@map("snippets")
}

model Reaction {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  commentId  String?   @map("comment_id")
  bookmarkId String?   @map("bookmark_id")
  questionId String?   @map("question_id")
  stackId    String?   @map("stack_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  snippetId  String?   @map("snippet_id")
  bookmark   Bookmark? @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  comment    Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  snippet    Snippet?  @relation(fields: [snippetId], references: [id], onDelete: Cascade)
  stack      Stack?    @relation(fields: [stackId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([commentId])
  @@index([bookmarkId])
  @@index([questionId])
  @@index([stackId])
  @@map("reactions")
}

model Bookmark {
  id          String     @id @default(cuid())
  url         String     @unique @db.VarChar(512)
  host        String
  title       String     @db.VarChar(280)
  description String     @db.VarChar(2048)
  faviconUrl  String     @map("favicon_url")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  comments    Comment[]
  reactions   Reaction[]

  @@index([host])
  @@map("bookmarks")
}

model Stack {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String     @db.VarChar(256)
  image       String
  url         String
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  comments    Comment[]
  reactions   Reaction[]
  users       User[]

  @@map("stack")
}

enum Role {
  USER
  ADMIN
}
